name: PCLink CI & Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: read

jobs:
  build-windows:
    name: Build Windows Packages
    runs-on: windows-2022
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Build Portable Archive
        run: python scripts/build.py --format portable --clean

      - name: Build One-File Executable
        run: python scripts/build.py --format onefile

      - name: Install Inno Setup
        run: choco install innosetup -y --no-progress

      - name: Build Windows Installer
        run: python scripts/build.py --format installer

      - name: Verify Windows build outputs
        run: |
          echo "Build artifacts:"
          if (Test-Path "releases") {
            Get-ChildItem releases\ -Recurse | Format-Table Name, Length
          } else {
            echo "No releases directory found"
          }
        shell: powershell

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PCLink-Windows
          path: releases/

  build-linux:
    name: Build Linux Packages
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Linux build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ruby ruby-dev rubygems build-essential \
            dpkg-dev rpm

      - name: Install FPM
        run: sudo gem install --no-document fpm

      - name: Install minimal Python dependencies for building
        run: |
          python -m pip install --upgrade pip
          # Only install what's absolutely needed for the build process
          pip install wheel setuptools

      - name: Verify build environment
        run: |
          echo "FPM version:"
          fpm --version
          echo "Python version:"
          python --version
          echo "Build tools:"
          dpkg --version

      - name: Build Linux DEB package
        run: python scripts/build_fpm.py

      - name: Verify Linux build outputs
        run: |
          echo "Build artifacts:"
          if [ -d "releases" ]; then
            ls -la releases/
            find releases/ -name "*.deb" -o -name "*.rpm"
          else
            echo "No releases directory found"
          fi

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PCLink-Linux
          path: releases/

  publish-release:
    name: Publish GitHub Release
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate Checksum File
        run: |
          cd artifacts
          find . -type f -exec sha256sum {} + | sort > ../SHA256SUMS.txt
          echo "Generated SHA256SUMS.txt:"
          cat ../SHA256SUMS.txt

      - name: Extract Release Notes from CHANGELOG
        run: |
          TAG="${{ github.ref_name }}"
          VERSION="${TAG#v}"
          NOTES=$(awk -v ver="$VERSION" 'BEGIN{p=0} /^## \['"$VERSION"'\]/{p=1;next} /^## \[/{p=0} p' CHANGELOG.md)
          if [ -z "$NOTES" ]; then
            NOTES="See CHANGELOG.md for details."
          fi
          echo "$NOTES" > RELEASE_NOTES.md

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
        run: |
          gh release create "$TAG" ./artifacts/*/* SHA256SUMS.txt \
            --title "Release $TAG" \
            --notes-file RELEASE_NOTES.md
