name: PCLink CI & Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022]
        include:
          - os: ubuntu-22.04
            artifact_name: PCLink-Linux
          - os: windows-2022
            artifact_name: PCLink-Windows
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install System Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            ruby ruby-dev rubygems \
            dpkg-dev rpm \
            python3-gi \
            libgirepository1.0-dev libcairo2-dev pkg-config \
            gir1.2-gtk-3.0 gir1.2-appindicator3-0.1

      # --- NEW STEP TO FIX THE ENVIRONMENT ---
      - name: Configure PKG_CONFIG_PATH for Linux
        if: runner.os == 'Linux'
        run: echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      # --- SIMPLIFIED THIS STEP BACK TO NORMAL ---
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ "$RUNNER_OS" == "Linux" ]; then
            # On Linux, install requirements but skip PyGObject (use system version)
            pip install fastapi uvicorn psutil cryptography requests qrcode pillow mss keyboard pyautogui pystray
            pip install -r requirements-dev.txt
          else
            # On Windows, install normally
            pip install -r requirements.txt
            pip install -r requirements-dev.txt
          fi
        shell: bash

      - name: Install FPM
        if: runner.os == 'Linux'
        run: |
          sudo gem install --no-document fpm

      - name: Verify FPM installation
        if: runner.os == 'Linux'
        run: |
          echo "Testing FPM installation:"
          fpm --version
          echo "Testing required tools:"
          dpkg --version
          python3 --version
          echo "Testing Python GI availability:"
          python3 -c "import gi; print('GI available')" || echo "GI not available"

      - name: Build for Linux - DEB Package
        if: runner.os == 'Linux'
        run: |
          python scripts/build_fpm.py

      - name: Verify Linux build outputs
        if: runner.os == 'Linux'
        run: |
          echo "Checking for build outputs in releases/ directory:"
          ls -la releases/ || echo "No releases directory found"
          if [ -d "releases" ]; then
            echo "Build artifacts:"
            find releases/ -name "*.deb" -o -name "*.rpm" | head -10
          fi

      - name: Build for Windows - Portable (.zip)
        if: runner.os == 'Windows'
        run: python scripts/build.py --format portable --clean

      - name: Build for Windows - One-File (.exe)
        if: runner.os == 'Windows'
        run: python scripts/build.py --format onefile

      - name: Install Inno Setup via Chocolatey
        if: runner.os == 'Windows'
        run: choco install innosetup -y --no-progress

      - name: Build for Windows - Installer (.exe)
        if: runner.os == 'Windows'
        run: python scripts/build.py --format installer

      - name: Verify Windows build outputs
        if: runner.os == 'Windows'
        run: |
          echo "Checking for build outputs in releases/ directory:"
          dir releases\ || echo "No releases directory found"
          if (Test-Path "releases") {
            echo "Build artifacts:"
            Get-ChildItem releases\ -Recurse -Include "*.exe", "*.zip" | Select-Object -First 10 | Format-Table Name, Length
          }
        shell: powershell

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: releases/

  publish-release:
    name: Publish GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate Checksum File
        run: |
          cd artifacts
          find . -type f -exec sha256sum {} + | sort > ../SHA2S.txt
          echo "Generated SHA256SUMS.txt:"
          cat ../SHA256SUMS.txt

      - name: Extract Release Notes from CHANGELOG
        id: extract_notes
        run: |
          TAG="${{ github.ref_name }}"
          VERSION="${TAG#v}"
          # This awk command extracts the content between the correct version header and the next header.
          NOTES=$(awk -v ver="$VERSION" 'BEGIN{p=0} /^## \['"$VERSION"'\]/{p=1;next} /^## \[/{p=0} p' CHANGELOG.md)
          if [ -z "$NOTES" ]; then
            NOTES="See CHANGELog.md for details."
          fi
          echo "$NOTES" > RELEASE_NOTES.md
          echo "Release notes extracted."

      - name: Create GitHub Release and Upload All Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
        run: |
          gh release create "$TAG" ./artifacts/*/* SHA256SUMS.txt \
            --title "Release $TAG" \
            --notes-file RELEASE_NOTES.md
