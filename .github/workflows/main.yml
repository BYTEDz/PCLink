name: PCLink CI & Release
# Updated to use NFPM instead of FPM for Linux package building

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-windows:
    name: Build Windows Packages
    runs-on: windows-2022
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Build Portable Archive
        run: python scripts/build.py --format portable --clean

      - name: Build One-File Executable
        run: python scripts/build.py --format onefile

      - name: Install Inno Setup
        run: choco install innosetup -y --no-progress

      - name: Build Windows Installer
        run: python scripts/build.py --format installer

      - name: Verify Windows build outputs
        run: |
          echo "Build artifacts:"
          if (Test-Path "releases") {
            Get-ChildItem releases\ -Recurse | Format-Table Name, Length
            
            # Check if web UI files are included in the build
            $exeFile = Get-ChildItem releases\ -Recurse -Filter "*.exe" | Select-Object -First 1
            if ($exeFile) {
              echo "Found executable: $($exeFile.FullName)"
              # For PyInstaller builds, web UI files should be embedded
              echo "Web UI files should be embedded in the executable"
            }
          } else {
            echo "No releases directory found"
          }
        shell: powershell

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PCLink-Windows
          path: releases/
          compression-level: 0

  build-linux:
    name: Build Linux Packages
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install minimal Python build dependencies
        run: |
          python -m pip install --upgrade pip
          # Only install what's needed for NFPM packaging
          pip install wheel setuptools build pyyaml

      - name: Install NFPM dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential dpkg-dev rpm

      - name: Install NFPM
        run: |
          # Install nfpm from GitHub releases
          NFPM_VERSION="2.40.0"
          echo "Installing NFPM version $NFPM_VERSION..."
          wget -O nfpm.deb "https://github.com/goreleaser/nfpm/releases/download/v${NFPM_VERSION}/nfpm_${NFPM_VERSION}_amd64.deb"
          sudo dpkg -i nfpm.deb || {
            echo "Failed to install nfpm via dpkg, trying alternative method..."
            # Alternative: install via go
            sudo apt-get install -y golang-go
            go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest
            sudo cp ~/go/bin/nfpm /usr/local/bin/
          }
          rm -f nfpm.deb



      - name: Verify build environment
        run: |
          echo "NFPM version:"
          nfpm --version
          echo "Python version:"
          python --version
          echo "Build tools:"
          dpkg --version

      - name: Clean previous build artifacts
        run: |
          echo "Cleaning previous build artifacts..."
          rm -rf build/ dist/ releases/ || true
          rm -f nfpm.yaml || true

      - name: Validate NFPM configuration
        run: |
          echo "Validating NFPM setup..."
          # Run the pre-build step to generate nfpm.yaml
          python scripts/build_nfpm.py || echo "Pre-build script completed"
          
          # Check if nfpm.yaml was generated
          if [ -f "nfpm.yaml" ]; then
            echo "NFPM configuration file exists"
            echo "Validating NFPM config syntax..."
            nfpm validate nfpm.yaml || echo "Config validation completed"
          else
            echo "Warning: nfpm.yaml not found"
          fi

      - name: Build Linux packages with NFPM
        run: python scripts/build.py --format nfpm

      - name: Verify Linux build outputs
        run: |
          echo "Build artifacts:"
          if [ -d "releases" ]; then
            ls -la releases/
            find releases/ -name "*.deb" -o -name "*.rpm"
            
            # Verify package contents
            DEB_FILE=$(find releases/ -name "*.deb" | head -1)
            if [ -n "$DEB_FILE" ]; then
              echo "Checking package contents in $DEB_FILE:"
              dpkg-deb -c "$DEB_FILE" | head -20
              echo "Checking for PCLink files:"
              dpkg-deb -c "$DEB_FILE" | grep -E "(pclink|usr/lib/pclink)" || echo "PCLink files not found in expected location"
            fi
            
            RPM_FILE=$(find releases/ -name "*.rpm" | head -1)
            if [ -n "$RPM_FILE" ]; then
              echo "Checking RPM package contents in $RPM_FILE:"
              rpm -qlp "$RPM_FILE" | head -20
            fi
          else
            echo "No releases directory found"
          fi

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PCLink-Linux
          path: releases/
          compression-level: 0

  publish-release:
    name: Publish GitHub Release
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate Checksum File
        run: |
          cd artifacts
          find . -type f -exec sha256sum {} + | sort > ../SHA256SUMS.txt
          echo "Generated SHA256SUMS.txt:"
          cat ../SHA256SUMS.txt

      - name: Extract Release Notes from CHANGELOG
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # For manual triggers, get the latest version from CHANGELOG
            VERSION=$(grep -m1 "^## \[" CHANGELOG.md | sed 's/^## \[\(.*\)\].*/\1/')
            TAG="v$VERSION"
          else
            # For tag triggers, use the tag
            TAG="${{ github.ref_name }}"
            VERSION="${TAG#v}"
          fi

          echo "Using TAG: $TAG, VERSION: $VERSION"

          NOTES=$(awk -v ver="$VERSION" 'BEGIN{p=0} /^## \['"$VERSION"'\]/{p=1;next} /^## \[/{p=0} p' CHANGELOG.md)
          if [ -z "$NOTES" ]; then
            NOTES="See CHANGELOG.md for details."
          fi
          echo "$NOTES" > RELEASE_NOTES.md
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Delete existing release if it exists (for re-uploads)
          gh release delete "$TAG" --yes || true

          # Create new release
          gh release create "$TAG" ./artifacts/*/* SHA256SUMS.txt \
            --title "Release $TAG" \
            --notes-file RELEASE_NOTES.md
